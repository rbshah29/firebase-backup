This project provides a comprehensive solution for automating daily backups of Firebase Storage data to a separate Google Cloud Storage bucket. It includes setup instructions, deployment steps, and commands for monitoring, recovery, and cleanup.

For this you need service account with Storage Admin role in backup project and Storage Object Admin role in source project.

## Source Project Setup
gcloud config set project test
gcloud services enable storage.googleapis.com storagetransfer.googleapis.com
gcloud services enable cloudfunctions.googleapis.com run.googleapis.com

# Grant permissions
gsutil iam ch \
  serviceAccount:backup@test.iam.gserviceaccount.com:roles/storage.objectAdmin \
  gs://conseiltoit.firebasestorage.app

# gsutil iam ch \
#   serviceAccount:backup@test.iam.gserviceaccount.com:roles/storage.objectViewer \
#   gs://test.firebasestorage.app



## Backup Project Setup

gcloud config set project test-dev-backups
gcloud services enable storage.googleapis.com storagetransfer.googleapis.com
gcloud services enable cloudfunctions.googleapis.com run.googleapis.com

# Grant permissions
gsutil iam ch \
  serviceAccount:backup@test-dev-backups.iam.gserviceaccount.com:roles/storage.admin \
  gs://test-dev-backups.firebasestorage.app

# Enable versioning
gsutil versioning set on gs://test-dev-backups.firebasestorage.app

# Create lifecycle policy
cat > lifecycle-policy.json << 'EOF'
{
  "rule": [
    {
      "action": {
        "type": "Delete"
      },
      "condition": {
        "age": 90,
        "isLive": false
      }
    }
  ]
}
EOF

# Apply lifecycle policy
gsutil lifecycle set lifecycle-policy.json gs://test-dev-backups.firebasestorage.app

## Function Files Setup
mkdir firebase-backup-function
cd firebase-backup-function

# Create requirements.txt
cat > requirements.txt << 'EOF'
functions-framework==3.*
google-cloud-storage==2.*
EOF

# Create main.py
touch main.py
# add logic to main.py

## Deploy Function
gcloud functions deploy firebase-storage-backup \
  --gen2 \
  --runtime=python311 \
  --source=. \
  --entry-point=backup_firebase_storage \
  --trigger-http \
  --service-account=backup@test-dev-backups.iam.gserviceaccount.com
# [Select regin usually press 28 or northamerica-northeast1 number]

This will genetate a URL like:
# https://northamerica-northeast1-test-dev-backups.cloudfunctions.net/firebase-storage-backup
Use this url in the scheduler and all other commands below. Keep in mind the region you selected. #[for --location flag]


## Create Daily Scheduler
gcloud scheduler jobs create http daily-firebase-backup \
  --schedule="0 2 * * *" \
  --uri="https://northamerica-northeast1-test-dev-backups.cloudfunctions.net/firebase-storage-backup" \
  --http-method=POST \
  --time-zone="America/Toronto" \
  --location="northamerica-northeast1" \
  --description="Daily backup at 2 AM"


## Testing Commands

# Manual test
curl -X POST "https://northamerica-northeast1-test-dev-backups.cloudfunctions.net/firebase-storage-backup"

# Trigger scheduler manually
gcloud scheduler jobs run daily-firebase-backup --location="northamerica-northeast1"

# Check logs
gcloud functions logs read firebase-storage-backup --gen2 --region=northamerica-northeast1 --limit=20


## Monitoring & Verification
gsutil versioning get gs://test-dev-backups.firebasestorage.app

# List backup contents
gsutil ls gs://test-dev-backups.firebasestorage.app/

# View all versions
gsutil ls -a gs://test-dev-backups.firebasestorage.app/ | head -20

# Check lifecycle policy
gsutil lifecycle get gs://test-dev-backups.firebasestorage.app

# View backup markers
gsutil ls gs://test-dev-backups.firebasestorage.app/_backup_markers/
gsutil cat gs://test-dev-backups.firebasestorage.app/_backup_markers/backup_completed_YYYY-MM-DD_HH-MM-SS.txt

# Check scheduler jobs
gcloud scheduler jobs list --location="northamerica-northeast1"
gcloud scheduler jobs describe daily-firebase-backup --location="northamerica-northeast1"


## Recovery Commands
# List all versions of a file
gsutil ls -a gs://test-dev-backups.firebasestorage.app/path/to/file.jpg

# Restore specific version
gsutil cp gs://test-dev-backups.firebasestorage.app/path/to/file.jpg#GENERATION_ID gs://test.firebasestorage.app/path/to/file.jpg

# Restore current version
gsutil cp gs://test-dev-backups.firebasestorage.app/path/to/file.jpg gs://test.firebasestorage.app/path/to/file.jpg

# Mass restore (current versions only)
gsutil -m cp -r gs://test-dev-backups.firebasestorage.app/* gs://test.firebasestorage.app/


## Cleanup Commands

# Remove old date-based backup folders (if any)
gsutil -m rm -r gs://test-dev-backups.firebasestorage.app/backup_YYYY-MM-DD_*/

# Delete specific versions
gsutil rm gs://test-dev-backups.firebasestorage.app/path/to/file.jpg#GENERATION_ID

#  Delete all versions of a file
gsutil -m rm -a gs://test-dev-backups.firebasestorage.app/**

# Update function
gcloud functions deploy firebase-storage-backup --gen2 --runtime=python311 --source=.

# Delete scheduler job
gcloud scheduler jobs delete daily-firebase-backup --location="northamerica-northeast1"


# For checking all the files that have been deleted from source but available in backup 

./find_deleted_file.sh

# to restore all files 
./find_deleted_file.sh restore



# For Finding all version of a specific file and commands to restore a specificversion 
./file_versions.sh <file_path>
# Example: ./file_versions.sh images/09cc1ccc-1a5f-4431-b069-5d426bc0615a.jpg